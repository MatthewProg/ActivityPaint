@using ActivityPaint.Application.BusinessLogic.Preset
@using ActivityPaint.Client.Components.Shared.Services
@using ActivityPaint.Core.Entities
@using Mediator
@inject IFeedbackService FeedbackService
@inject IMediator Mediator

@if (SelectedMethod is null)
{
    <MudText Typo="@Typo.h6" Align="@Align.Center" Style="opacity:0.5;user-select:none">Please select the method first</MudText>
}
else if (SelectedMethod == GenerationMethodEnum.SaveToFile)
{
    <MudButton Variant="@Variant.Filled" OnClick="SavePreset">Save preset</MudButton>
}
else if (SelectedMethod == GenerationMethodEnum.GenerateRepo)
{
    <MudButton Variant="@Variant.Filled" OnClick="GenerateRepo">Save repository</MudButton>
}
else if (SelectedMethod == GenerationMethodEnum.GenerateGitCommands)
{
    <MudText Typo="@Typo.h6" Align="@Align.Center" Style="user-select:none">See the CLI tab</MudText>
}
else
{
    <MudText Typo="@Typo.h6" Align="@Align.Center" Color="@Color.Error" Style="user-select:none">The method has not been implemented yet</MudText>
}

@code {
    [CascadingParameter(Name = "EditorModel")]
    protected EditorModel? EditorModel { get; set; }

    [Parameter, EditorRequired]
    public GenerationMethodEnum? SelectedMethod { get; set; }

    private async Task SavePreset()
    {
        if (EditorModel is null) return;

        var preset = EditorModel.ToPresetModel();
        var command = new SavePresetCommand(preset);

        var result = await Mediator.Send(command);
        if (result.IsFailure)
        {
            FeedbackService.ShowError(result.Error);
        }
    }

    private async Task GenerateRepo()
    {
        // TODO: Implement
        throw new NotImplementedException();
    }
}
