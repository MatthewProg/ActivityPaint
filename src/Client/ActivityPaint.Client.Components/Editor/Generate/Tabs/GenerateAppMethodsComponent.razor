@using ActivityPaint.Application.BusinessLogic.Generate
@using ActivityPaint.Application.BusinessLogic.Preset
@using ActivityPaint.Application.BusinessLogic.Repository
@using ActivityPaint.Application.DTOs.Repository
@using ActivityPaint.Client.Components.Shared.Services
@using ActivityPaint.Core.Entities
@using Mediator
@inject IFeedbackService FeedbackService
@inject IMediator Mediator

@if (SelectedMethod is null)
{
    <MudText Typo="@Typo.h6" Align="@Align.Center" Style="opacity:0.5;user-select:none">Please select the method first</MudText>
}
else if (SelectedMethod == GenerationMethodEnum.SaveToFile)
{
    <MudButton Variant="@Variant.Filled" OnClick="SavePreset">Save preset</MudButton>
}
else if (SelectedMethod == GenerationMethodEnum.GenerateRepo)
{
    if (OperatingSystem.IsBrowser())
    {
        <MudText Typo="@Typo.h6" Align="@Align.Center" Style="user-select:none">Generation in the browser is not supported yet.<br />Please use the CLI or the desktop app.</MudText>
    }
    else
    {
        <MudButton Variant="@Variant.Filled" OnClick="GenerateRepo">Save repository</MudButton>
    }
}
else if (SelectedMethod == GenerationMethodEnum.GenerateGitCommands)
{
    <GenerateCommandsComponent SelectedMethod="GenerationMethodEnum.GenerateGitCommands" IsCli="false" />
}
else
{
    <MudText Typo="@Typo.h6" Align="@Align.Center" Color="@Color.Error" Style="user-select:none">The method has not been implemented yet</MudText>
}

@code {
    [CascadingParameter(Name = "EditorModel")]
    protected EditorModel? EditorModel { get; set; }

    [Parameter, EditorRequired]
    public GenerationMethodEnum? SelectedMethod { get; set; }

    private async Task SavePreset()
    {
        if (EditorModel is null) return;

        var preset = EditorModel.ToPresetModel();
        var command = new SavePresetCommand(preset);

        var result = await Mediator.Send(command);
        if (result.IsFailure)
        {
            FeedbackService.ShowError(result.Error);
        }
    }

    private async Task GenerateRepo()
    {
        if (EditorModel is null) return;

        var getConfigCommand = new GetRepositoryConfigCommand();
        var configResult = await Mediator.Send(getConfigCommand);
        if (configResult.IsFailure)
        {
            FeedbackService.ShowError(configResult.Error);
            return;
        }

        var preset = EditorModel.ToPresetModel();
        var author = configResult.Value!.ToAuthorModel();
        var generateCommand = new GenerateRepoCommand(
            Preset: preset,
            Author: author,
            Zip: true
        );

        var generateResult = await Mediator.Send(generateCommand);
        if (generateResult.IsFailure)
        {
            FeedbackService.ShowError(generateResult.Error);
        }
    }
}
