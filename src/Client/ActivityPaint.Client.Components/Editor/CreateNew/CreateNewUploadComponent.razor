@using ActivityPaint.Application.BusinessLogic.Preset
@using ActivityPaint.Client.Components.Shared.Services
@using Mediator
@using Microsoft.AspNetCore.Components.Forms
@inject IFeedbackService FeedbackService
@inject IMediator Mediator

<div class="h-100">
    <MudFileUpload T="IBrowserFile"
                   OnFilesChanged="OnInputFileChanged"
                   Accept=".json"
                   Class="mud-height-full"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ActivatorContent>
            <MudPaper Outlined="true" Class="@_dragClass">
                <MudIcon Size="@Size.Large" Icon="@Icons.Material.Filled.FileUpload" />
                <MudText Typo="Typo.button">
                    Upload preset
                </MudText>
            </MudPaper>
        </ActivatorContent>
    </MudFileUpload>
</div>

@code {
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mud-width-full mud-height-full d-flex flex-column align-center justify-center";

    private string _dragClass = DefaultDragClass;

    [CascadingParameter(Name = "EditorModel")]
    protected EditorModel? EditorModel { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnNextStageClicked { get; set; }

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var file = e.File;

        using var stream = file.OpenReadStream();
        var command = new ParsePresetCommand(stream);
        var result = await Mediator.Send(command);

        if (result.IsFailure)
        {
            FeedbackService.ShowError(result.Error);
            return;
        }

        if (EditorModel is null || result.Value is null)
        {
            FeedbackService.Show("Something went wrong.", Severity.Error);
            return;
        }

        EditorModelMap.MapFromPresetModel(result.Value, EditorModel);
        await OnNextStageClicked.InvokeAsync();
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;
}
