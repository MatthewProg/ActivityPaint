@using ActivityPaint.Client.Components.Editor.CreateNew
@using ActivityPaint.Client.Components.Editor.Generate
@using ActivityPaint.Client.Components.Editor.Paint
@using ActivityPaint.Client.Components.Shared
@using ActivityPaint.Client.Components.Shared.Components.Stage
@using ActivityPaint.Client.Components.Shared.Mappers
@using System.Web
@inject NavigationManager Nav

<div class="d-flex flex-column" style="width: 100%;">
    <CascadingValue Value="_editorModel" Name="EditorModel">
        <StagesContainerComponent @ref="_stagesContainer">
            <StageComponent Caption="Create new" Icon="@Icons.Material.Filled.OpenInNew">
                <CreateNewComponent OnNextStageClicked="NextStage" />
            </StageComponent>
            <StageComponent Caption="Edit" Icon="@Icons.Material.Filled.Brush">
                <PaintComponent OnPreviousStageClicked="PreviousStage" OnNextStageClicked="NextStage" SetIsBusy="SetIsBusy" />
            </StageComponent>
            <StageComponent Caption="Generate" Icon="@CustomIcons.Gears">
                <GenerateComponent OnPreviousStageClicked="PreviousStage" />
            </StageComponent>
        </StagesContainerComponent>
    </CascadingValue>
</div>

@code {
    private StagesContainerComponent? _stagesContainer;
    private EditorModel _editorModel = new();

    protected override void OnInitialized()
    {
        var queryString = Nav.Uri.Split('?').ElementAtOrDefault(1);
        if (queryString is not null)
        {
            var query = HttpUtility.ParseQueryString(queryString);
            _editorModel = EditorQueryMap.QueryToEditor(query);
        }
        base.OnInitialized();
    }

    private async Task NextStage()
    {
        if (_stagesContainer is null) return;

        await _stagesContainer.NextStage();
    }

    private async Task PreviousStage()
    {
        if (_stagesContainer is null) return;

        await _stagesContainer.PreviousStage();
    }

    private async Task SetIsBusy(bool isBusy)
    {
        if (_stagesContainer is null) return;

        await _stagesContainer.SetIsBusy(isBusy);
    }
}
