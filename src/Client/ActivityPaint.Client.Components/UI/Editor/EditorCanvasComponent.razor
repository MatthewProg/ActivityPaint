@using ActivityPaint.Client.Components.Integration
@using ActivityPaint.Client.Components.Models
@using System.ComponentModel
@inject EditorCanvasInterop CanvasInterop
@implements IDisposable

<table id="editor-canvas">
    @for (int r = 0; r < 7; r++)
    {
        <tr>
            @for (int c = 0; c < 54; c++)
            {
                <td>
                    @{
                        var doy = GetDayOfYear(r, c, StartDate, EndDate);
                        if (doy.HasValue)
                        {
                            <div class="canvas-cell" data-level="@(c % 5)" data-doy="@doy"></div>
                        }
                    }
                </td>
            }
        </tr>
    }
</table>

@code {
    [Parameter, EditorRequired]
    public required EditorSettingsModel Settings { get; set; }

    private DateTime StartDate => Settings.StartDate ?? new DateTime((Settings.StartDate ?? DateTime.Now).Year, 1, 1);
    private DateTime EndDate => new DateTime((Settings.StartDate ?? DateTime.Now).Year, 12, 31);

    public void Dispose()
    {
        Settings.PropertyChanged -= OnSettingsChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        Settings.PropertyChanged += OnSettingsChanged;
        await CanvasInterop.Init();
        await CanvasInterop.UpdateSettings(Settings);

        await base.OnInitializedAsync();
    }

    private async void OnSettingsChanged(object? sender, PropertyChangedEventArgs e)
    {
        await CanvasInterop.UpdateSettings(Settings);
    }

    private static int? GetDayOfYear(int dayOfWeek, int week, DateTime startDate, DateTime endDate)
    {
        var dayOfWeekNormalized = ((int)startDate.DayOfWeek + 6) % 7;
        if (week == 0 && dayOfWeek < dayOfWeekNormalized)
        {
            return null;
        }

        var doy = (week * 7) + dayOfWeek + 1 - dayOfWeekNormalized;

        return doy > endDate.DayOfYear ? null : doy;
    }
}
