@using ActivityPaint.Client.Components.Integration
@using ActivityPaint.Client.Components.Models
@using ActivityPaint.Core.Enums
@using System.ComponentModel
@inject PaintCanvasInterop CanvasInterop
@implements IAsyncDisposable

<table id="paint-canvas">
    @for (int r = 0; r < 7; r++)
    {
        <tr>
            @for (int c = 0; c < 54; c++)
            {
                var doy = GetDayOfYear(r, c, StartDate, EndDate);
                if (doy.HasValue)
                {
                    var lvl = (int?)EditorModel?.CanvasData?.ElementAtOrDefault(doy.Value - 1) ?? 0;
                    <td id="@($"cell-{c}-{r}")" data-level="@lvl" data-doy="@doy">
                        <div></div>
                    </td>
                }
                else
                {
                    <td class="disabled"></td>
                }
            }
        </tr>
    }
</table>

@code {
    [Parameter, EditorRequired]
    public required PaintCanvasModel CanvasModel { get; set; }

    [CascadingParameter(Name = "EditorModel")]
    protected EditorModel? EditorModel { get; set; }

    private DateTime StartDate => EditorModel?.StartDate ?? new DateTime((EditorModel?.StartDate ?? DateTime.Now).Year, 1, 1);
    private DateTime EndDate => new DateTime((EditorModel?.StartDate ?? DateTime.Now).Year, 12, 31);

    public async ValueTask<List<IntensityEnum>> GetCanvasData()
    {
        return await CanvasInterop.SerializeCanvas();
    }

    public async ValueTask ResetCanvas()
    {
        await CanvasInterop.ResetCanvas();
    }

    public async ValueTask DisposeAsync()
    {
        CanvasModel.PropertyChanged -= OnSettingsChanged;
        await CanvasInterop.Destroy();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CanvasInterop.Init();
            await CanvasInterop.UpdateSettings(CanvasModel);
            CanvasModel.PropertyChanged += OnSettingsChanged;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnSettingsChanged(object? sender, PropertyChangedEventArgs e)
    {
        await CanvasInterop.UpdateSettings(CanvasModel);
    }

    private static int? GetDayOfYear(int dayOfWeek, int week, DateTime startDate, DateTime endDate)
    {
        var dayOfWeekNormalized = ((int)startDate.DayOfWeek + 6) % 7;
        if (week == 0 && dayOfWeek < dayOfWeekNormalized)
        {
            return null;
        }

        var doy = (week * 7) + dayOfWeek + 1 - dayOfWeekNormalized;

        return doy > endDate.DayOfYear ? null : doy;
    }
}
