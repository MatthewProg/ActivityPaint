@using ActivityPaint.Client.Components.Enums
@using ActivityPaint.Client.Components.Models
@using ActivityPaint.Client.Components.UI.Editor.PaintStage.Toolbar
@using ActivityPaint.Core.Enums
@using System.ComponentModel
@implements IDisposable

<PaintToolbarComponent Settings="_settings" />
<PaintCanvasComponent @ref="_canvas" CanvasModel="_settings" />
<div class="d-flex justify-space-between gap-2 mt-2">
    <MudButton Variant="@Variant.Text" OnClick="PreviousStage">Previous stage</MudButton>
    <MudButton Variant="@Variant.Text" OnClick="Reset">Reset</MudButton>
    <MudButton Variant="@Variant.Filled" OnClick="NextStage">Next stage</MudButton>
</div>

@code {
    private PaintCanvasComponent? _canvas;
    private PaintCanvasModel _settings = new PaintCanvasModel
    {
        IsDarkMode = false,
        BrushSize = 1,
        SelectedIntensity = IntensityEnum.Level0,
        SelectedTool = PaintToolEnum.Brush,
    };

    [CascadingParameter(Name = "EditorModel")]
    protected EditorModel? EditorModel { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnNextStageClicked { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnPreviousStageClicked { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<bool> SetIsBusy { get; set; }

    public void Dispose()
    {
        _settings.PropertyChanged -= OnSettingsChanged;
    }

    protected override void OnInitialized()
    {
        _settings.IsDarkMode = EditorModel?.IsDarkModeDefault ?? false;
        _settings.PropertyChanged += OnSettingsChanged;

        base.OnInitialized();
    }

    private void OnSettingsChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private async Task Reset()
    {
        if (_canvas is null || EditorModel is null) return;

        EditorModel.CanvasData = null;
        await _canvas.ResetCanvas();
    }

    private async Task PreviousStage()
    {
        if (_canvas is null || EditorModel is null)
        {
            return;
        }

        await SetIsBusy.InvokeAsync(true);

        EditorModel.CanvasData = await _canvas.GetCanvasData();

        await OnPreviousStageClicked.InvokeAsync();
    }

    private async Task NextStage()
    {
        if (_canvas is null || EditorModel is null)
        {
            return;
        }

        await SetIsBusy.InvokeAsync(true);

        EditorModel.CanvasData = await _canvas.GetCanvasData();

        await OnNextStageClicked.InvokeAsync();
    }
}
