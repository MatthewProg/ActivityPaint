@typeparam T
<div class="@Class" style="@Style" role="radiogroup">
    @if(ItemTemplate is not null)
    {
        foreach(var item in Items ?? Enumerable.Empty<T>())
        {
            <div @key="item"
                 class="@ItemClass @(item?.Equals(SelectedItem) == true ? "active" : "")"
                 style="@ItemStyle"
                 role="radio"
                 @onclick="async () => await ChangeActiveItem(item)">
                @ItemTemplate(item)
            </div>
        }        
    }
</div>

@code {
    [Parameter, EditorRequired]
    public RenderFragment<T>? ItemTemplate { get; set; }

    [Parameter, EditorRequired]
    public IEnumerable<T>? Items { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? ItemClass { get; set; }

    [Parameter]
    public string? ItemStyle { get; set; }

    [Parameter]
    public T? SelectedItem { get; set; }

    [Parameter]
    public EventCallback<T?> SelectedItemChanged { get; set; }

    private async Task ChangeActiveItem(T? item)
    {
        await SelectedItemChanged.InvokeAsync(item);
    }
}
