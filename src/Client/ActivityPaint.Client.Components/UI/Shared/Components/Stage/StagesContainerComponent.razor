<StagesProgressBarComponent Stages="_stages" CurrentStage="CurrentStage" />
<div class="stages-container">
    <CascadingValue Name="RegisterStage" Value="RegisterStage">
        <CascadingValue Name="CurrentStage" Value="CurrentStage">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
    <div class="stages-container__overlay @(_isBusy ? "" : "d-none")">
        <MudProgressCircular Indeterminate="true" Color="@Color.Primary" Size="@Size.Medium" />
    </div>
</div>

@code {
    private List<StageComponent> _stages = new();
    private bool _isBusy;

    [Parameter]
    public RenderFragment? ChildContent{ get; set; }

    [Parameter]
    public EventCallback<int> CurrentStageChanged { get; set; }

    [Parameter]
    public EventCallback<int?> StageReadyCallback { get; set; }

    public int CurrentStage { get; private set; } = 0;

    public async Task NextStage()
    {
        if (CurrentStage < _stages.Count - 1)
        {
            await SetIsBusy(true);
            CurrentStage++;
            await CurrentStageChanged.InvokeAsync(CurrentStage);
            await SetIsBusy(false);
        }
    }

    public async Task PreviousStage()
    {
        if (CurrentStage > 0)
        {
            await SetIsBusy(true);
            CurrentStage--;
            await CurrentStageChanged.InvokeAsync(CurrentStage);
            await SetIsBusy(false);
        }
    }

    public async Task SetIsBusy(bool isBusy)
    {
        _isBusy = isBusy;
        await Task.Delay(1);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        base.OnAfterRender(firstRender);
    }

    private int RegisterStage(StageComponent stage)
    {
        _stages.Add(stage);
        return _stages.Count - 1;
    }
}
