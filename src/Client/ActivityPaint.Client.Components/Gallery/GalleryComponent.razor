@using ActivityPaint.Application.BusinessLogic.Gallery
@using ActivityPaint.Application.DTOs.Gallery
@using ActivityPaint.Client.Components.Shared.Interops
@using ActivityPaint.Client.Components.Shared.Services
@using ActivityPaint.Client.Components.Shared.Utilities
@using Mediator
@inject IUtilitiesInterop UtilitiesInterop
@inject IFeedbackService FeedbackService
@inject IMediator Mediator

<MudGrid Justify="Justify.Center">
    @if (_items is null)
    {
        <MudText Typo="Typo.h6">Loading...</MudText>
    }
    else
    {
        if (_itemsCount != 0)
        {
            @foreach (var item in _items)
            {
                <MudItem xs="12" sm="6" lg="4">
                    <GalleryItemComponent @key="item.Id" Item="item" ParentReadyListener="_itemsReadyTrigger" DeleteCallback="Delete" />
                </MudItem>
            }
            <MudFlexBreak />
            <MudPagination @bind-Selected:get="_page" @bind-Selected:set="PageChange" Count="_pageCount" Class="mt-2" />
        }
        else
        {
            <MudText Typo="Typo.h6">No saved presets yet</MudText>
        }
    }
</MudGrid>

@code {
    private const int _pageSize = 18;
    private int _itemsCount = 0;
    private int _pageCount => (int)Math.Ceiling(Decimal.Divide(_itemsCount, _pageSize));
    private int _page = 1;
    private IEnumerable<GalleryModel>? _items = null;
    private AsyncTrigger _itemsReadyTrigger = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Factory.StartNew(async () => {
            await UpdateItemsCount();

            if (_itemsCount != 0)
                await LoadPage();
        });

        await base.OnInitializedAsync();
    }

    private async Task UpdateItemsCount()
    {
        var command = new GetGalleryItemsCountCommand();
        var result = await Mediator.Send(command);

        if (result.IsFailure)
        {
            FeedbackService.ShowError(result.Error);
            return;
        }

        _itemsCount = result.Value;
    }

    private async Task PageChange(int newPage)
    {
        _page = newPage;
        await LoadPage();
    }

    private async Task LoadPage()
    {
        var command = new LoadGalleryItemsCommand(_page, _pageSize);
        var result = await Mediator.Send(command);

        if (result.IsFailure || result.Value is null)
        {
            FeedbackService.ShowError(result.Error);
            return;
        }

        _items = result.Value;
        await UtilitiesInterop.ScrollToTop();
        await _itemsReadyTrigger.Notify();
    }

    private async Task Delete(GalleryModel item)
    {
        throw new NotImplementedException();
    }
}
