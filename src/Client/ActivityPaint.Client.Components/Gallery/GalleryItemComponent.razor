@using ActivityPaint.Application.BusinessLogic.Image
@using ActivityPaint.Application.DTOs.Preset
@using ActivityPaint.Client.Components.Shared.Utilities
@using ActivityPaint.Core.Extensions
@using Mediator
@using Microsoft.Extensions.Logging
@implements IDisposable
@inject IMediator Mediator
@inject NavigationManager Navigation
@inject ILogger<GalleryItemComponent> Logger

<div class="item-container">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6" Class="text-ellipsis nowrap">@Item.Name</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" />
            </CardHeaderActions>
        </MudCardHeader>
        @if(string.IsNullOrEmpty(_image))
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="68px" />
        }
        else
        {
            <MudImage Src="@_image" ObjectFit="ObjectFit.Contain" />
        }
        <MudCardContent>
            <div class="d-flex flex-wrap justify-space-between">
                <MudText Typo="Typo.body2" Class="nowrap px-1"><b>Start date: </b>@Item.StartDate.ToString("yyyy-MM-dd")</MudText>
                <MudText Typo="Typo.body2" Class="nowrap px-1"><b>Default theme: </b>@(Item.IsDarkModeDefault ? "Dark" : "Light")</MudText>
            </div>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => _shareOpened = !_shareOpened">
                Share
                <MudPopover AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.BottomLeft" Open="_shareOpened">
                    <GalleryItemShareComponent @ref="_shareComponent" Item="Item" />
                </MudPopover>
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Edit">Edit</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
        </MudCardActions>
    </MudCard>
</div>

@code {
    private GalleryItemShareComponent? _shareComponent;
    private IDisposable? _listenerRegistration;
    private bool _shareOpened = false;
    private volatile string? _image;

    [Parameter, EditorRequired]
    public required PresetModel Item { get; set; }

    [Parameter, EditorRequired]
    public required IListener ParentReadyListener { get; set; }

    protected override void OnInitialized()
    {
        _listenerRegistration = ParentReadyListener.Listen(ct => Task.Factory.StartNew(async () => await LoadImage(ct), ct));

        base.OnInitialized();
    }

    private async Task LoadImage(CancellationToken cancellationToken)
    {
        if (!string.IsNullOrEmpty(_image))
        {
            return;
        }

        var command = new GeneratePreviewImageCommand(Item);
        var result = await Mediator.Send(command, cancellationToken);

        if (result.IsFailure || result.Value is null)
        {
            Logger.LogError(result.Error.Message);
            return;
        }

        var base64 = result.Value.ToBase64String();
        _image = $"data:image/png;base64,{base64}";

        await InvokeAsync(async () => {
            StateHasChanged();
            await Task.Delay(1, cancellationToken);
        });
    }

    private void Edit()
    {
        var redirect = _shareComponent?.ShareUrl;
        if (string.IsNullOrEmpty(redirect))
        {
            return;
        }

        Navigation.NavigateTo(redirect, false);
    }

    public void Dispose()
    {
        _listenerRegistration?.Dispose();
    }
}
